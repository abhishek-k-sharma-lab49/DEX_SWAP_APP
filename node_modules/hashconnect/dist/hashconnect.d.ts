import { Event } from "ts-typed-events";
import { IRelay } from "./types/relay";
import { MessageUtil, MessageHandler, MessageTypes, RelayMessage } from "./message";
import { HashConnectTypes, IHashConnect, HashConnectConnectionState } from "./types/hashconnect";
import { HashConnectProvider } from "./provider/provider";
import { HashConnectSigner } from "./provider/signer";
/**
 * Main interface with hashpack
 */
export declare class HashConnect implements IHashConnect {
    relay: IRelay;
    foundExtensionEvent: Event<HashConnectTypes.WalletMetadata>;
    foundIframeEvent: Event<HashConnectTypes.WalletMetadata>;
    pairingEvent: Event<MessageTypes.ApprovePairing>;
    transactionEvent: Event<MessageTypes.Transaction>;
    acknowledgeMessageEvent: Event<MessageTypes.Acknowledge>;
    additionalAccountRequestEvent: Event<MessageTypes.AdditionalAccountRequest>;
    connectionStatusChange: Event<HashConnectConnectionState>;
    authRequestEvent: Event<MessageTypes.AuthenticationRequest>;
    transactionResolver: (value: MessageTypes.TransactionResponse | PromiseLike<MessageTypes.TransactionResponse>) => void;
    additionalAccountResolver: (value: MessageTypes.AdditionalAccountResponse | PromiseLike<MessageTypes.AdditionalAccountResponse>) => void;
    authResolver: (value: MessageTypes.AuthenticationResponse | PromiseLike<MessageTypes.AuthenticationResponse>) => void;
    messageParser: MessageHandler;
    messages: MessageUtil;
    private metadata;
    publicKeys: Record<string, string>;
    private privateKey;
    debug: boolean;
    constructor(debug?: boolean);
    init(metadata: HashConnectTypes.AppMetadata | HashConnectTypes.WalletMetadata, privKey?: string): Promise<HashConnectTypes.InitilizationData>;
    connect(topic?: string, metadataToConnect?: HashConnectTypes.AppMetadata | HashConnectTypes.WalletMetadata): Promise<HashConnectTypes.ConnectionState>;
    /**
     * Set up event connections
     */
    private setupEvents;
    /**
     * Send functions
     */
    sendTransaction(topic: string, transaction: MessageTypes.Transaction): Promise<MessageTypes.TransactionResponse>;
    requestAdditionalAccounts(topic: string, message: MessageTypes.AdditionalAccountRequest): Promise<MessageTypes.AdditionalAccountResponse>;
    sendAdditionalAccounts(topic: string, message: MessageTypes.AdditionalAccountResponse): Promise<string>;
    sendTransactionResponse(topic: string, message: MessageTypes.TransactionResponse): Promise<string>;
    pair(pairingData: HashConnectTypes.PairingData, accounts: string[], network: string): Promise<HashConnectTypes.ConnectionState>;
    reject(topic: string, reason: string, msg_id: string): Promise<void>;
    acknowledge(topic: string, pubKey: string, msg_id: string): Promise<void>;
    authenticate(topic: string, account_id: string, server_signing_account: string, serverSignature: Uint8Array, payload: {
        url: string;
        data: any;
    }): Promise<MessageTypes.AuthenticationResponse>;
    sendAuthenticationResponse(topic: string, message: MessageTypes.AuthenticationResponse): Promise<string>;
    /**
     * Helpers
     */
    generatePairingString(state: HashConnectTypes.ConnectionState, network: string, multiAccount: boolean): string;
    decodePairingString(pairingString: string): HashConnectTypes.PairingData;
    private generateEncryptionKeys;
    private sanitizeString;
    /**
     * Local wallet stuff
     */
    findLocalWallets(): void;
    connectToIframeParent(pairingString: string): void;
    connectToLocalWallet(pairingString: string): void;
    sendEncryptedLocalTransaction(message: string): void;
    decodeLocalTransaction(message: string): Promise<RelayMessage>;
    /**
     * Provider stuff
     */
    getProvider(network: string, topicId: string, accountToSign: string): HashConnectProvider;
    getSigner(provider: HashConnectProvider): HashConnectSigner;
}
